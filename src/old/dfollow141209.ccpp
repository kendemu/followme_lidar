//http://marksilliman.com/2014/10/06/turtlebots-missing-hello-world-program/
/*
 * Hello World and Crash for Turtlebot
 * Moves Turtlebot forward until you ctrl + c
 * Tested using TurtleBot 2, ROS Indigo, Ubuntu 14.04
 */
/// Read home/kensei4/hydro/src/amcl/src/amcl_node.cpp
// 141210: 切り出しがうまくいかず、凸壁を脚と間違える
// 141203: 何とか追跡できるようになったが、壁を追跡者と間違えたる
// To Do: 人と壁の判別、比例航法の実装

#include <iostream>
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <stdio.h>
#include <std_msgs/String.h>
#include <sensor_msgs/LaserScan.h>
#include "/usr/local/include/kobuki-1.0/libkobuki.h"
// #include "libkobuki.h"
using namespace std;
// アールティ用ロボットネームスペース
using namespace rt_net;

const double follow_max_distance = 3.0; // follow distance
const double follow_min_distance = 0.2; // follow distance 
const double leg_width_max = 0.3;   // 脚幅の最大値
const double leg_width_min = 0.1;  // 脚幅の最大値
const double follow_angle = 45;     // 探す範囲は正面のこの角度[deg]  
const double gain_linear = 0.5;            // 比例ゲイン
const double gain_turn  = 5.0;
const double linear_max_speed   = 0.5;
const double turn_max_speed     = 1.0;

double laser_data[1080]; // hokuyo lidar UTM-30LX
double target_angle;     // target angle [rad] center is 0 [rad]
double target_distance;  // minimum distance from a robot

class Object {
public:
  bool leg;   // leg:true  or not:false
  int begin; // right side laser
  int end;   // left side laser
  int diff;
  double distance;
  double angle; // rad
  double width;
};

Object obj[100], human;

void findHuman(int dataCount, double laser_angle_min, 
	       double laser_angle_max, double laser_angle_increment)
{
  const double threshold = 0.05; // 物体を識別するしきい値(距離の変化) [m]
  int center = dataCount/2;  // レーザーの中央の番号                                   
  double init_search_dist  = 2.0; // 追跡する人の初期距離 [m]                        
  int search_lines = 1080 *  (follow_angle/270.0); // 走査線数
  int left=0, right=dataCount; // 走査線の左端、右端の番号
  int sum_no = 0, no=0; 
  double last_distance = 999;  // 1本前の走査線の距離
  int flag_begin = 999, flag_end = 999; // 走査線の番号がわかる
  int object_num = 0;

  for (int j = center - search_lines/2; j <= center + search_lines/2; j++) {
    if (laser_data[j] == 999) {
      continue;
    }
    double diff = last_distance - laser_data[j];
    last_distance = laser_data[j];

    //cout << "diff=" << diff << endl;
    // 距離の差がthresholdより大きいと脚でないとみなす
    if (diff >  threshold) { // 凸形状始まり
      flag_begin = j;
      obj[object_num].begin = j;
    }
    if (diff < -threshold) { // 凸形状終わり
      flag_end   = j;
      obj[object_num].end = j;
    }

    if (flag_begin != 999){
      if (flag_end != 999) {
	obj[object_num++].diff = flag_end - flag_begin;
	flag_begin = 999; // カウンターをリセット
	flag_end   = 999;
      }
      else {
	// 終端処理。途中(flag_begin==999)から終端まで物体がある場合
       	if(j == center + search_lines/2) {
	  obj[object_num++].diff = j - flag_begin;
	}
      }
    }
  }

  cout << "object_num=" << object_num << endl;

  for (int i=0; i < object_num; i++) {
    double sum_dist = 0, sum_num = 0;
    int count = 0;
    for (int j = obj[i].begin; j < obj[i].end; j++) {
      sum_dist += laser_data[j];
      sum_num  += j;
      count++;
    }
    obj[i].distance = sum_dist/(obj[i].diff + 1);
    int obj_center;
    if (count == 0) obj[i].angle = 999;
    else {
      obj_center  = sum_num/count;
      obj[i].angle
	= (laser_angle_max - laser_angle_min) * obj_center
	/ (double) dataCount + laser_angle_min;
    }
    obj[i].width = obj[i].distance * obj[i].diff * laser_angle_increment;
    if ((obj[i].distance <= follow_max_distance) && (obj[i].width <= leg_width_max) && (obj[i].width >= leg_width_min)) {
      obj[i].leg = true;
    }
    else obj[i].leg = false;

    //printf("sum_dist=%f count=%d\n",sum_dist,count);
    //printf("obj[%d]=%f\n",i,obj[i]);
    printf("obj:%d distance=%f angle=%f width=%f diff=%d center=%d\n",
	   i, obj[i].distance,obj[i].angle*180/M_PI, obj[i].width,obj[i].diff,
	   obj_center);
  }
  
  int leg_count = 0;
  double angle_sum = 0.0, dist_sum = 0.0;
  for (int i=0; i < object_num; i++) {
    if (obj[i].leg == true) {
      leg_count++;
      angle_sum += obj[i].angle;
      dist_sum  += obj[i].distance;
    }
  }

  if (leg_count > 0) {
    human.angle   = angle_sum/leg_count;
    human.distance = dist_sum/leg_count;
  }
  else {
    human.angle   = 999;
    human.distance = 999;
  }

  printf("Human angle=%f distance=%f\n",human.angle*180/M_PI,human.distance);

  if (leg_count == 2) {
    cout << "Detect a human with two legs" << endl;
  }
  else if (leg_count < 0) {
    cout << "Error: findHuman" << endl;
  } 
  else if (leg_count == 0) {
    cout << "No detect" << endl;
  }
  else if (leg_count == 1) {
    cout << "Detect one leg" << endl;
  }
  else {
    cout << "Detect " << leg_count << endl;
  }
}



void laserCallback(const sensor_msgs::LaserScan laser_scan)
{
  int dataNum = 0;
  int dataCount;

  //ROS_INFO("size[%d]: ", laser_scan.ranges.size());
  //ROS_INFO("angle min=%.2f max=%.2f inc=%f\n",laser_scan.angle_min,
  //	   laser_scan.angle_max, laser_scan.angle_increment);
  //ROS_INFO("range min=%.2f max=%.2f \n",laser_scan.range_min,
  //         laser_scan.range_max);

  dataCount= laser_scan.ranges.size();
  
  for(int i = 0; i < dataCount; i++) {       
    double value = laser_scan.ranges[i];
    //ROS_INFO("value[%d]:%f\n", i,value);
    if ((value >= laser_scan.range_min) && (value <= laser_scan.range_max))
    {
      laser_data[i] = value;
    }
    else {
      laser_data[i] = 999; // invalid data
    }
  }

  findHuman(dataCount, laser_scan.angle_min, 
	    laser_scan.angle_max,laser_scan.angle_increment);

  //for(int i = 0; i < dataCount; i++) {
  //  ROS_INFO("myvalue[%d]:%f\n", i,laser_data[i]);                            
  //}       
  //printf("Target center=%d angle=%f\n",target_center, target_angle);
  //cout << "1:" << 
}


// main関数
// rosのmobile_baseは遅いので、rtのライブラリを使用した
int main(int argc, char* argv[])
{
  std::cout << "Starting Followme Demo" << std::endl;
  //std::string arg = "/def/ttyUSB0";
  std::string arg="/dev/kobuki";
  if(argc > 1) {
    arg = argv[1];
  }
  Kobuki *kobuki = createKobuki(KobukiStringArgument(arg));
  if (kobuki == NULL) std::cout << "Open Error:/dev/kobuki \n";
  std::cout << "Starting Followme Demo" << std::endl;
  std::cout << "follow_max_distance =" << follow_max_distance << std::endl;
  std::cout << "follow_min_distance =" << follow_min_distance << std::endl;
  std::cout << "follow_angle        =" << follow_angle << std::endl;
  std::cout << "leg_width_max       =" << leg_width_max << std::endl;
  std::cout << "leg_width_min       =" << leg_width_min << std::endl;

  // laser                                                                                
  ros::init(argc, argv, "dfollow");
  ros::NodeHandle node;
  //ros::Subscriber hokuyoSubscriber = node.subscribe("/scan", 1, scanValues);            
  ros::Subscriber laserSubscriber = node.subscribe("/scan", 100, laserCallback);

  //init direction that turtlebot should go
  geometry_msgs::Twist cmd_speed, tmp_speed;
  cmd_speed.linear.x  = 0; // m/s
  cmd_speed.linear.y  = 0; // m/s
  cmd_speed.angular.z = 0; // rad                                                         

  ros::Rate loop_rate(33); // 33Hz     

  while(ros::ok()) {
    // 999 はエラーなので速度を0にセット
    if (human.distance == 999) cmd_speed.linear.x = 0;
    // 人が追跡距離内にいる場合
    else if (((human.distance >=  follow_min_distance) &&
              (human.distance <=  follow_max_distance))) {

      if (follow_min_distance - human.distance > 0)
	cmd_speed.linear.x -= 0.01;  // 近づきすぎ
      else
        cmd_speed.linear.x += 0.01;  // 離れすぎ

      // 速度の上限と下限を設定
      if (cmd_speed.linear.x >   linear_max_speed)
        cmd_speed.linear.x = linear_max_speed;
      if (cmd_speed.linear.x < - linear_max_speed)
        cmd_speed.linear.x = - linear_max_speed;
    }
    // 人が追跡距離外に出た場合は停止する
    else {
      cmd_speed.linear.x = 0;
    }

    // 5度以内のときは回転しない 
    if (human.distance == 999) cmd_speed.angular.z = 0;
    else if (fabs(human.angle) > 5.0 * M_PI/ 180.0) {
      if (human.angle < 0) 
	cmd_speed.angular.z -= 0.02;  // 近づきすぎ
      else
        cmd_speed.angular.z += 0.02;  // 離れすぎ

      if (cmd_speed.angular.z >  turn_max_speed) 
	cmd_speed.angular.z =  turn_max_speed;
      if (cmd_speed.angular.z < -turn_max_speed) 
	cmd_speed.angular.z = -turn_max_speed;
    }
    else {
      cmd_speed.angular.z = 0;
    }

    //cmd_speed.linear.x = 0;
    //cmd_speed.angular.z = 0;
    kobuki->setTargetVelocity(cmd_speed.linear.x,cmd_speed.angular.z);

    //loop_rate.sleep();
    usleep(5*1000);
    ros::spinOnce();
  }

  ROS_INFO("Finished\n");
 
  delete kobuki;
  return 0;
}
